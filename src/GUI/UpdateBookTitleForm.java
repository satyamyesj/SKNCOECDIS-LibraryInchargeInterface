/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DatabaseAccessObjects.QueryObjects.AddBookTitleAttributes;
import DatabaseAccessObjects.ResultObjects.BookTitleQueryResult;
import DatabaseAccessObjects.ResultObjects.DomainQueryResult;
import DatabaseAccessObjects.ResultObjects.PublisherQueryResult;
import LibraryIncharge.ServerRequests;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author hp
 */
public class UpdateBookTitleForm extends javax.swing.JFrame {

    /**
     * Creates new form verifyStudentForm
     */
    boolean correctInput = true;
    Color forgroundColor = new Color(131, 56, 209);
    Color backgroundColor=new Color(235, 232, 247);
    List<BookTitleQueryResult> bookTitleQueryResultList=new ArrayList<>();
    List<PublisherQueryResult> publisherQueryResultList=new ArrayList<>();
    List<DomainQueryResult> domainQueryResultsList=new ArrayList<>();
  

    public UpdateBookTitleForm(List<BookTitleQueryResult> bookTitleQueryResultList, List<PublisherQueryResult> publisherQueryResultList, List<DomainQueryResult> domainQueryResultList) {
        initComponents();
        this.bookTitleQueryResultList=bookTitleQueryResultList;
        this.publisherQueryResultList=publisherQueryResultList;
        this.domainQueryResultsList=domainQueryResultList;
        
        publisherIDComboBox.removeAllItems();
        for (int i = 0; i < publisherQueryResultList.size(); i++) {
            publisherIDComboBox.addItem(publisherQueryResultList.get(i).publisher_id + " : " + publisherQueryResultList.get(i).publisher_name);
        }
        publisherIDComboBox.setSelectedIndex(-1);
        publisherIDComboBox.setForeground(forgroundColor);
        publisherIDComboBox.setBackground(backgroundColor);

        domainIDComboBox.removeAllItems();
        for (int i = 0; i < domainQueryResultList.size(); i++) {
            domainIDComboBox.addItem(domainQueryResultList.get(i).domain_id + " : " + domainQueryResultList.get(i).domain_name);
        }
        domainIDComboBox.setSelectedIndex(-1);
        domainIDComboBox.setForeground(forgroundColor);
        domainIDComboBox.setBackground(backgroundColor);
        
        selectBookIDComboBox.removeAllItems();
        for (int i = 0; i < bookTitleQueryResultList.size(); i++) {
            selectBookIDComboBox.addItem(bookTitleQueryResultList.get(i).book_title);
        }
        selectBookIDComboBox.setSelectedIndex(-1);
        selectBookIDComboBox.setForeground(forgroundColor);
        selectBookIDComboBox.setBackground(backgroundColor);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateBookTitlePanel = new javax.swing.JPanel();
        updateBookTitleLable = new javax.swing.JLabel();
        noOfCopiesLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        publisherIDLabel = new javax.swing.JLabel();
        availableCopiesLabel = new javax.swing.JLabel();
        cupboardNoLabel = new javax.swing.JLabel();
        domainIDLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        titleText = new javax.swing.JTextField();
        authorText = new javax.swing.JTextField();
        noOfCopiesText = new javax.swing.JTextField();
        availableCopiesText = new javax.swing.JTextField();
        cupboardNoText = new javax.swing.JTextField();
        shelfNoText = new javax.swing.JTextField();
        publisherIDComboBox = new javax.swing.JComboBox<>();
        domainIDComboBox = new javax.swing.JComboBox<>();
        selectBookIDComboBox = new javax.swing.JComboBox<>();
        shelfNoLabel1 = new javax.swing.JLabel();
        bookIDLabel = new javax.swing.JLabel();
        bookIDText = new javax.swing.JTextField();
        selectBookLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SKNCOECDIS v.18.1 - Departmental Library");
        setResizable(false);

        updateBookTitlePanel.setBackground(new java.awt.Color(235, 232, 247));

        updateBookTitleLable.setFont(new java.awt.Font("Century Schoolbook", 3, 28)); // NOI18N
        updateBookTitleLable.setForeground(new java.awt.Color(131, 56, 209));
        updateBookTitleLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateBookTitleLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/64px/Edit2.png"))); // NOI18N
        updateBookTitleLable.setText("Update Book Title");

        noOfCopiesLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        noOfCopiesLabel.setForeground(new java.awt.Color(131, 56, 209));
        noOfCopiesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        noOfCopiesLabel.setText("no of copies : ");

        authorLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        authorLabel.setForeground(new java.awt.Color(131, 56, 209));
        authorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        authorLabel.setText("author : ");

        titleLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(131, 56, 209));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        titleLabel.setText("title : ");

        publisherIDLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        publisherIDLabel.setForeground(new java.awt.Color(131, 56, 209));
        publisherIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        publisherIDLabel.setText("publisher id : ");

        availableCopiesLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        availableCopiesLabel.setForeground(new java.awt.Color(131, 56, 209));
        availableCopiesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        availableCopiesLabel.setText("available copies : ");

        cupboardNoLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        cupboardNoLabel.setForeground(new java.awt.Color(131, 56, 209));
        cupboardNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cupboardNoLabel.setText("cupboard no : ");

        domainIDLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        domainIDLabel.setForeground(new java.awt.Color(131, 56, 209));
        domainIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        domainIDLabel.setText("domain id : ");

        messageLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(131, 56, 209));
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("select & update book title");

        cancelButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(131, 56, 209));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/CancelButton.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateButton.setForeground(new java.awt.Color(131, 56, 209));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        titleText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        titleText.setForeground(new java.awt.Color(131, 106, 209));
        titleText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        titleText.setSelectionColor(new java.awt.Color(203, 192, 235));
        titleText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                titleTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                titleTextKeyTyped(evt);
            }
        });

        authorText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        authorText.setForeground(new java.awt.Color(131, 106, 209));
        authorText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        authorText.setSelectionColor(new java.awt.Color(203, 192, 235));
        authorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                authorTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorTextKeyTyped(evt);
            }
        });

        noOfCopiesText.setEditable(false);
        noOfCopiesText.setBackground(new java.awt.Color(235, 232, 247));
        noOfCopiesText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        noOfCopiesText.setForeground(new java.awt.Color(131, 106, 209));
        noOfCopiesText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        noOfCopiesText.setSelectionColor(new java.awt.Color(203, 192, 235));
        noOfCopiesText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                noOfCopiesTextInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        noOfCopiesText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noOfCopiesTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noOfCopiesTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                noOfCopiesTextKeyTyped(evt);
            }
        });

        availableCopiesText.setEditable(false);
        availableCopiesText.setBackground(new java.awt.Color(235, 232, 247));
        availableCopiesText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        availableCopiesText.setForeground(new java.awt.Color(131, 106, 209));
        availableCopiesText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        availableCopiesText.setSelectionColor(new java.awt.Color(203, 192, 235));
        availableCopiesText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                availableCopiesTextKeyReleased(evt);
            }
        });

        cupboardNoText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        cupboardNoText.setForeground(new java.awt.Color(131, 106, 209));
        cupboardNoText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        cupboardNoText.setSelectionColor(new java.awt.Color(203, 192, 235));
        cupboardNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cupboardNoTextKeyReleased(evt);
            }
        });

        shelfNoText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        shelfNoText.setForeground(new java.awt.Color(131, 106, 209));
        shelfNoText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        shelfNoText.setSelectionColor(new java.awt.Color(203, 192, 235));
        shelfNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                shelfNoTextKeyReleased(evt);
            }
        });

        publisherIDComboBox.setBackground(new java.awt.Color(235, 232, 247));
        publisherIDComboBox.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        publisherIDComboBox.setForeground(new java.awt.Color(131, 106, 209));
        publisherIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        publisherIDComboBox.setSelectedIndex(-1);
        publisherIDComboBox.setToolTipText("");
        publisherIDComboBox.setAutoscrolls(true);
        publisherIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherIDComboBoxActionPerformed(evt);
            }
        });

        domainIDComboBox.setBackground(new java.awt.Color(235, 232, 247));
        domainIDComboBox.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        domainIDComboBox.setForeground(new java.awt.Color(131, 106, 209));
        domainIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        domainIDComboBox.setSelectedIndex(-1);
        domainIDComboBox.setToolTipText("");
        domainIDComboBox.setAutoscrolls(true);
        domainIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainIDComboBoxActionPerformed(evt);
            }
        });

        selectBookIDComboBox.setBackground(new java.awt.Color(235, 232, 247));
        selectBookIDComboBox.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        selectBookIDComboBox.setForeground(new java.awt.Color(131, 106, 209));
        selectBookIDComboBox.setToolTipText("");
        selectBookIDComboBox.setAutoscrolls(true);
        selectBookIDComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectBookIDComboBoxItemStateChanged(evt);
            }
        });
        selectBookIDComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                selectBookIDComboBoxMousePressed(evt);
            }
        });
        selectBookIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBookIDComboBoxActionPerformed(evt);
            }
        });
        selectBookIDComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                selectBookIDComboBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                selectBookIDComboBoxKeyTyped(evt);
            }
        });

        shelfNoLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        shelfNoLabel1.setForeground(new java.awt.Color(131, 56, 209));
        shelfNoLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shelfNoLabel1.setText("shelf no : ");

        bookIDLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        bookIDLabel.setForeground(new java.awt.Color(131, 56, 209));
        bookIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bookIDLabel.setText("book id : ");

        bookIDText.setEditable(false);
        bookIDText.setBackground(new java.awt.Color(235, 232, 247));
        bookIDText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        bookIDText.setForeground(new java.awt.Color(131, 106, 209));
        bookIDText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        bookIDText.setSelectionColor(new java.awt.Color(203, 192, 235));
        bookIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIDTextActionPerformed(evt);
            }
        });
        bookIDText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookIDTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bookIDTextKeyTyped(evt);
            }
        });

        selectBookLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        selectBookLabel.setForeground(new java.awt.Color(131, 56, 209));
        selectBookLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        selectBookLabel.setText("select book : ");

        javax.swing.GroupLayout updateBookTitlePanelLayout = new javax.swing.GroupLayout(updateBookTitlePanel);
        updateBookTitlePanel.setLayout(updateBookTitlePanelLayout);
        updateBookTitlePanelLayout.setHorizontalGroup(
            updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateBookTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateBookTitleLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(updateBookTitlePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(updateBookTitlePanelLayout.createSequentialGroup()
                        .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(selectBookLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cupboardNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(domainIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(publisherIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(availableCopiesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(noOfCopiesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bookIDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(authorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(shelfNoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(domainIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(publisherIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectBookIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cupboardNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(availableCopiesText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(authorText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfCopiesText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shelfNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        updateBookTitlePanelLayout.setVerticalGroup(
            updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateBookTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updateBookTitleLable, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectBookLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectBookIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfCopiesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfCopiesText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availableCopiesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableCopiesText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publisherIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publisherIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domainIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domainIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cupboardNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cupboardNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shelfNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shelfNoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(updateBookTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(updateBookTitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(updateBookTitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        boolean enteredAllAttributes = true;
        AddBookTitleAttributes addBookTitleAttributes = new AddBookTitleAttributes();
        try {
            if(!bookIDText.getText().equals("")){
                addBookTitleAttributes.book_id=Integer.parseInt(bookIDText.getText());
            }
            else{
                enteredAllAttributes=false;
            }
            
            if (!authorText.getText().equals("")) {
                addBookTitleAttributes.book_author = authorText.getText();
            } else {
                enteredAllAttributes = false;
            }

            if (!titleText.getText().equals("")) {
                addBookTitleAttributes.book_title = titleText.getText();
            } else {
                enteredAllAttributes = false;
            }

            if (!noOfCopiesText.getText().equals("")) {
                addBookTitleAttributes.no_of_copies = Integer.parseInt(noOfCopiesText.getText());
            } else {
                enteredAllAttributes = false;
            }

            if (!availableCopiesText.getText().equals("")) {
                addBookTitleAttributes.available_copies = Integer.parseInt(availableCopiesText.getText());
                if (addBookTitleAttributes.available_copies > addBookTitleAttributes.no_of_copies) {
                    JOptionPane.showMessageDialog(null, "available copies can not be greater than no of copies");
                    enteredAllAttributes = false;
                }
            } else {
                enteredAllAttributes = false;
            }

            if (publisherIDComboBox.getSelectedIndex() > -1) {
                addBookTitleAttributes.publisher_id = Integer.parseInt(String.valueOf(publisherIDComboBox.getSelectedItem().toString().toCharArray(), 0, publisherIDComboBox.getSelectedItem().toString().indexOf(':') - 1));
            } else {
                enteredAllAttributes = false;
            }

            if (domainIDComboBox.getSelectedIndex() > -1) {
                addBookTitleAttributes.domain_id = Integer.parseInt(String.valueOf(domainIDComboBox.getSelectedItem().toString().toCharArray(), 0, domainIDComboBox.getSelectedItem().toString().indexOf(':') - 1));
            } else {
                enteredAllAttributes = false;
            }

            if (!cupboardNoText.getText().equals("")) {
                addBookTitleAttributes.cupboard_no = Integer.parseInt(cupboardNoText.getText());
            } else {
                enteredAllAttributes = false;
            }

            if (!shelfNoText.getText().equals("")) {
                addBookTitleAttributes.shelf_no = Integer.parseInt(shelfNoText.getText());
            } else {
                enteredAllAttributes = false;
            }
            if (enteredAllAttributes && correctInput) {
                boolean added_successfully = ServerRequests.updateBookTitle(addBookTitleAttributes);
                if (added_successfully) {
                    GUI.libraryInchargeInterfacePanel.showRequestResult("book title updated successfully");
                } else {
                    GUI.libraryInchargeInterfacePanel.showRequestResult("book didn't updated, updated book title might be already present");
                }
                GUI.libraryInchargeInterfaceFrame.setEnabled(true);
                this.dispose();
            } else if (!enteredAllAttributes) {
                JOptionPane.showMessageDialog(null, "all fields are mandatory");
            } else if (!correctInput) {
                JOptionPane.showMessageDialog(null, "incorrect input");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "invalid number format");
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(UpdateBookTitleForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        GUI.libraryInchargeInterfacePanel.showRequestResult("book title not updated");
        GUI.libraryInchargeInterfaceFrame.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void domainIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainIDComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_domainIDComboBoxActionPerformed

    private void noOfCopiesTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfCopiesTextKeyTyped

    }//GEN-LAST:event_noOfCopiesTextKeyTyped

    private void noOfCopiesTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_noOfCopiesTextInputMethodTextChanged

    }//GEN-LAST:event_noOfCopiesTextInputMethodTextChanged

    private void noOfCopiesTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfCopiesTextKeyReleased
        availableCopiesText.setText(noOfCopiesText.getText());
        try {
            if (Integer.parseInt(noOfCopiesText.getText()) >= 256 || Integer.parseInt(noOfCopiesText.getText()) < 1) {
                messageLabel.setForeground(Color.MAGENTA);
                messageLabel.setText("*maximum range is 0-255");
                noOfCopiesText.setForeground(Color.MAGENTA);
                correctInput = false;
            } else {
                messageLabel.setForeground(forgroundColor);
                messageLabel.setText("select & update book title");
                noOfCopiesText.setForeground(forgroundColor);
                correctInput = true;
            }
        } catch (NumberFormatException e) {
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*number input only");
            noOfCopiesText.setForeground(Color.MAGENTA);
            correctInput = false;
        }
    }//GEN-LAST:event_noOfCopiesTextKeyReleased

    private void publisherIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherIDComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publisherIDComboBoxActionPerformed

    private void titleTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleTextKeyTyped
        if (titleText.getText().length() >= 100) {
            evt.consume();
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*maximum charchter length is 100");
        }
    }//GEN-LAST:event_titleTextKeyTyped

    private void titleTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleTextKeyReleased
        messageLabel.setForeground(forgroundColor);
        messageLabel.setText("select & update book title");
    }//GEN-LAST:event_titleTextKeyReleased

    private void authorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorTextKeyTyped
        if (authorText.getText().length() >= 100) {
            evt.consume();
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*maximum character length is 100");
        }
    }//GEN-LAST:event_authorTextKeyTyped

    private void authorTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorTextKeyReleased
        messageLabel.setForeground(forgroundColor);
        messageLabel.setText("select & update book title");
    }//GEN-LAST:event_authorTextKeyReleased

    private void noOfCopiesTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfCopiesTextKeyPressed

    }//GEN-LAST:event_noOfCopiesTextKeyPressed

    private void availableCopiesTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_availableCopiesTextKeyReleased
        try {
            if (Integer.parseInt(availableCopiesText.getText()) >= 256 || Integer.parseInt(availableCopiesText.getText()) < 1) {
                messageLabel.setForeground(Color.MAGENTA);
                messageLabel.setText("*maximum range is 0-255");
                availableCopiesText.setForeground(Color.MAGENTA);
                correctInput = false;
            } else {
                messageLabel.setForeground(forgroundColor);
                messageLabel.setText("select & update book title");
                availableCopiesText.setForeground(forgroundColor);
                correctInput = true;
            }
        } catch (NumberFormatException e) {
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*number input only");
            availableCopiesText.setForeground(Color.MAGENTA);
            correctInput = false;
        }
    }//GEN-LAST:event_availableCopiesTextKeyReleased

    private void cupboardNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cupboardNoTextKeyReleased
        try {
            if (Integer.parseInt(cupboardNoText.getText()) >= 256 || Integer.parseInt(cupboardNoText.getText()) < 1) {
                messageLabel.setForeground(Color.MAGENTA);
                messageLabel.setText("*maximum range is 0-255");
                cupboardNoText.setForeground(Color.MAGENTA);
                correctInput = false;
            } else {
                messageLabel.setForeground(forgroundColor);
                messageLabel.setText("select & update book title");
                cupboardNoText.setForeground(forgroundColor);
                correctInput = true;
            }
        } catch (NumberFormatException e) {
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*number input only");
            cupboardNoText.setForeground(Color.MAGENTA);
            correctInput = false;
        }
    }//GEN-LAST:event_cupboardNoTextKeyReleased

    private void shelfNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shelfNoTextKeyReleased
        try {
            if (Integer.parseInt(shelfNoText.getText()) >= 256 || Integer.parseInt(shelfNoText.getText()) < 1) {
                messageLabel.setForeground(Color.MAGENTA);
                messageLabel.setText("*maximum range is 0-255");
                shelfNoText.setForeground(Color.MAGENTA);
                correctInput = false;
            } else {
                messageLabel.setForeground(forgroundColor);
                messageLabel.setText("select & update book title");
                shelfNoText.setForeground(forgroundColor);
                correctInput = true;
            }
        } catch (NumberFormatException e) {
            messageLabel.setForeground(Color.MAGENTA);
            messageLabel.setText("*number input only");
            shelfNoText.setForeground(Color.MAGENTA);
            correctInput = false;
        }
    }//GEN-LAST:event_shelfNoTextKeyReleased

    private void bookIDTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookIDTextKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIDTextKeyReleased

    private void bookIDTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookIDTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIDTextKeyTyped

    private void bookIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIDTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIDTextActionPerformed

    private void selectBookIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBookIDComboBoxActionPerformed
         int selectedIndex=selectBookIDComboBox.getSelectedIndex();
        if(selectedIndex>-1){
            bookIDText.setText(String.valueOf(bookTitleQueryResultList.get(selectedIndex).book_id));
            authorText.setText(bookTitleQueryResultList.get(selectedIndex).book_author);
            titleText.setText(bookTitleQueryResultList.get(selectedIndex).book_title);
            noOfCopiesText.setText(String.valueOf(bookTitleQueryResultList.get(selectedIndex).no_of_copies));
            availableCopiesText.setText(String.valueOf(bookTitleQueryResultList.get(selectedIndex).available_copies));
            cupboardNoText.setText(String.valueOf(bookTitleQueryResultList.get(selectedIndex).cupboard_no));
            shelfNoText.setText(String.valueOf(bookTitleQueryResultList.get(selectedIndex).shelf_no));

             for(int i=0;i<publisherQueryResultList.size();i++){
                 if(publisherQueryResultList.get(i).publisher_id==bookTitleQueryResultList.get(selectedIndex).publisher_id){
                         publisherIDComboBox.setSelectedIndex(i);
                       break;
                 }
             }
            
             for(int i=0;i<domainQueryResultsList.size();i++){
                 if(domainQueryResultsList.get(i).domain_id==bookTitleQueryResultList.get(selectedIndex).domain_id){
                   domainIDComboBox.setSelectedIndex(i);
                   break;
                 }
             }
        }
        else{
            bookIDText.setText("");
            titleText.setText("");
            authorText.setText("");
            noOfCopiesText.setText("");
            availableCopiesText.setText("");
            cupboardNoText.setText("");
            shelfNoText.setText("");
            publisherIDComboBox.setSelectedIndex(-1);
            domainIDComboBox.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_selectBookIDComboBoxActionPerformed

    private void selectBookIDComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectBookIDComboBoxKeyReleased

    }//GEN-LAST:event_selectBookIDComboBoxKeyReleased

    private void selectBookIDComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectBookIDComboBoxItemStateChanged
        
    }//GEN-LAST:event_selectBookIDComboBoxItemStateChanged

    private void selectBookIDComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectBookIDComboBoxMousePressed
        
    }//GEN-LAST:event_selectBookIDComboBoxMousePressed

    private void selectBookIDComboBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectBookIDComboBoxKeyTyped

    }//GEN-LAST:event_selectBookIDComboBoxKeyTyped

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(verifyStudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(verifyStudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(verifyStudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(verifyStudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VerifyStudentForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authorLabel;
    private javax.swing.JTextField authorText;
    private javax.swing.JLabel availableCopiesLabel;
    private javax.swing.JTextField availableCopiesText;
    private javax.swing.JLabel bookIDLabel;
    private javax.swing.JTextField bookIDText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cupboardNoLabel;
    private javax.swing.JTextField cupboardNoText;
    private javax.swing.JComboBox<String> domainIDComboBox;
    private javax.swing.JLabel domainIDLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel noOfCopiesLabel;
    private javax.swing.JTextField noOfCopiesText;
    private javax.swing.JComboBox<String> publisherIDComboBox;
    private javax.swing.JLabel publisherIDLabel;
    private javax.swing.JComboBox<String> selectBookIDComboBox;
    private javax.swing.JLabel selectBookLabel;
    private javax.swing.JLabel shelfNoLabel1;
    private javax.swing.JTextField shelfNoText;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleText;
    private javax.swing.JLabel updateBookTitleLable;
    private javax.swing.JPanel updateBookTitlePanel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
