/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Connection.ConnectionDetails;
import DatabaseAccessObjects.QueryObjects.BookSearchAttributes;
import DatabaseAccessObjects.QueryObjects.ReportSearchAttributes;
import DatabaseAccessObjects.QueryObjects.UserProfileRequestAttribute;
import DatabaseAccessObjects.QueryObjects.UserSearchAttributes;
import DatabaseAccessObjects.ResultObjects.BookSearchQueryResult;
import DatabaseAccessObjects.ResultObjects.PendingBooksRecordQueryResult;
import DatabaseAccessObjects.ResultObjects.PendingReportRecordQueryResult;
import DatabaseAccessObjects.ResultObjects.ReportSearchQueryResult;
import DatabaseAccessObjects.ResultObjects.UserProfileQueryResult;
import GUIFunctions.Output;
import LibraryIncharge.LibraryInchargeInterface;
import LibraryIncharge.ServerRequests;
import StoragePath.StoragePath;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author hp
 */
public class LibraryInchargeInterfacePanel extends javax.swing.JPanel {

    String issueBookResult;
    public static IssueBookForm issueBookForm;
    public static IssueReportForm issueReportForm;
    // TimerTask runProgressBar;
    //static ProgressWindow progressWindow;

    /**
     * Creates new form LibraryInchargeInterfacePanel
     */
    public LibraryInchargeInterfacePanel() {
        initComponents();
        Color backgroundColor = new Color(235, 232, 247);
        Dimension headerSize = new Dimension(0, 35);
        Color forgroundColor = new Color(131, 56, 209);

        JTableHeader header = bookSearchResultTable.getTableHeader();
        header.setBackground(backgroundColor);
        header.setPreferredSize(headerSize);
        header.setFont(new Font("Century Gothic", Font.BOLD, 18));
        header.setForeground(forgroundColor);

        header = reportSearchResultTable.getTableHeader();
        header.setBackground(backgroundColor);
        header.setPreferredSize(headerSize);
        header.setFont(new Font("Century Gothic", Font.BOLD, 18));
        header.setForeground(forgroundColor);

        header = pendingBookResultTable.getTableHeader();
        header.setBackground(backgroundColor);
        header.setPreferredSize(headerSize);
        header.setFont(new Font("Century Gothic", Font.BOLD, 18));
        header.setForeground(forgroundColor);

        header = pendingReportResultTable.getTableHeader();
        header.setBackground(backgroundColor);
        header.setPreferredSize(headerSize);
        header.setFont(new Font("Century Gothic", Font.BOLD, 18));
        header.setForeground(forgroundColor);

        header = userSearchResultTable.getTableHeader();
        header.setBackground(backgroundColor);
        header.setPreferredSize(headerSize);
        header.setFont(new Font("Century Gothic", Font.BOLD, 18));
        header.setForeground(forgroundColor);

        reportSearchResultTable.setFillsViewportHeight(true);
        bookSearchResultTable.setFillsViewportHeight(true);
        pendingBookResultTable.setFillsViewportHeight(true);
        pendingReportResultTable.setFillsViewportHeight(true);
        userSearchResultTable.setFillsViewportHeight(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navigationTabbedPane = new javax.swing.JTabbedPane();
        bookIssuePanel = new javax.swing.JPanel();
        bookAuthorText = new javax.swing.JTextField();
        bookTitleText = new javax.swing.JTextField();
        bookDomainText = new javax.swing.JTextField();
        subjectAbbreviationText = new javax.swing.JTextField();
        bookAuthorLabel = new javax.swing.JLabel();
        bookTitleLabel = new javax.swing.JLabel();
        bookDomainLabel = new javax.swing.JLabel();
        subjectabbreviationLabel = new javax.swing.JLabel();
        bookSearchResultScrollPane = new javax.swing.JScrollPane();
        bookSearchResultTable = new javax.swing.JTable();
        bookIssueButton = new javax.swing.JButton();
        bookSearchButton = new javax.swing.JButton();
        reportIssuePanel = new javax.swing.JPanel();
        reportTitleText = new javax.swing.JTextField();
        reportDomainText1 = new javax.swing.JTextField();
        reportTitleLabel = new javax.swing.JLabel();
        reportDomainLabel = new javax.swing.JLabel();
        reportSearchButton = new javax.swing.JButton();
        reportIssueButton = new javax.swing.JButton();
        reportSearchResultScrollPane = new javax.swing.JScrollPane();
        reportSearchResultTable = new javax.swing.JTable();
        returnRenewPanel = new javax.swing.JPanel();
        usernameForPRText = new javax.swing.JTextField();
        usernameForPRLabel = new javax.swing.JLabel();
        returnBookButton = new javax.swing.JButton();
        searchPendingRecordButton = new javax.swing.JButton();
        renewBookButton = new javax.swing.JButton();
        returnReportButton = new javax.swing.JButton();
        pendingBookResultScrollPane = new javax.swing.JScrollPane();
        pendingBookResultTable = new javax.swing.JTable();
        pendingReportResultScrollPane = new javax.swing.JScrollPane();
        pendingReportResultTable = new javax.swing.JTable();
        usersPanel = new javax.swing.JPanel();
        usernameForUsersText = new javax.swing.JTextField();
        usernameForUsersLabel = new javax.swing.JLabel();
        searchUserButton = new javax.swing.JButton();
        verifyButton = new javax.swing.JButton();
        deleteUserProfileButton = new javax.swing.JButton();
        clearanceButton = new javax.swing.JButton();
        userSearchResultScrollPane = new javax.swing.JScrollPane();
        userSearchResultTable = new javax.swing.JTable();
        emailText = new javax.swing.JTextField();
        mobileText = new javax.swing.JTextField();
        emailForUsersLabel = new javax.swing.JLabel();
        mobilenoForUsersLabel = new javax.swing.JLabel();
        maintainancePanel = new javax.swing.JPanel();
        addBookTitleButton = new javax.swing.JButton();
        addReportButton = new javax.swing.JButton();
        updateDomainButton = new javax.swing.JButton();
        addPublisherButton = new javax.swing.JButton();
        addSubjectButton = new javax.swing.JButton();
        updateBookTitleButton = new javax.swing.JButton();
        updateReportButton = new javax.swing.JButton();
        addDomainButton = new javax.swing.JButton();
        updatePublisherButton = new javax.swing.JButton();
        updateSubjectButton = new javax.swing.JButton();
        catalogueLabel = new javax.swing.JLabel();
        openStorageDirectory = new javax.swing.JButton();
        clearAccountButton = new javax.swing.JButton();
        editStoragePathButton = new javax.swing.JButton();
        editConnectionButton = new javax.swing.JButton();
        resetStudentsVerificationButton = new javax.swing.JButton();
        addEditLabel = new javax.swing.JLabel();
        editConstraintsButton = new javax.swing.JButton();
        addEditLabel1 = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        yearLabel = new javax.swing.JLabel();
        yearText = new javax.swing.JTextField();
        getAlumniListButton = new javax.swing.JButton();
        getOverDueLibraryRecordButton = new javax.swing.JButton();
        getAccountListButton = new javax.swing.JButton();
        getSubjectListButton = new javax.swing.JButton();
        getPublisherButton = new javax.swing.JButton();
        getPublisherListButton = new javax.swing.JButton();
        getBookTitlesButton = new javax.swing.JButton();
        getReportTitlesButton = new javax.swing.JButton();
        getPendingLibraryRecordsButton = new javax.swing.JButton();
        deleteLibraryContentButton = new javax.swing.JButton();
        interfaceIconLabel = new javax.swing.JLabel();
        resultWindowScrollPane = new javax.swing.JScrollPane();
        resultWindowTextArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(235, 232, 247));
        setPreferredSize(new java.awt.Dimension(1280, 720));

        navigationTabbedPane.setBackground(new java.awt.Color(235, 232, 247));
        navigationTabbedPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        navigationTabbedPane.setForeground(new java.awt.Color(131, 56, 209));
        navigationTabbedPane.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N

        bookIssuePanel.setBackground(new java.awt.Color(235, 232, 247));

        bookAuthorText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        bookAuthorText.setForeground(new java.awt.Color(131, 106, 209));
        bookAuthorText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        bookAuthorText.setSelectionColor(new java.awt.Color(203, 192, 235));

        bookTitleText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        bookTitleText.setForeground(new java.awt.Color(131, 106, 209));
        bookTitleText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        bookTitleText.setSelectionColor(new java.awt.Color(203, 192, 235));

        bookDomainText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        bookDomainText.setForeground(new java.awt.Color(131, 106, 209));
        bookDomainText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        bookDomainText.setSelectionColor(new java.awt.Color(203, 192, 235));
        bookDomainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDomainTextActionPerformed(evt);
            }
        });

        subjectAbbreviationText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        subjectAbbreviationText.setForeground(new java.awt.Color(131, 106, 209));
        subjectAbbreviationText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        subjectAbbreviationText.setSelectionColor(new java.awt.Color(203, 192, 235));

        bookAuthorLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        bookAuthorLabel.setForeground(new java.awt.Color(131, 56, 209));
        bookAuthorLabel.setText("Book Author");

        bookTitleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        bookTitleLabel.setForeground(new java.awt.Color(131, 56, 209));
        bookTitleLabel.setText("Book Title");

        bookDomainLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        bookDomainLabel.setForeground(new java.awt.Color(131, 56, 209));
        bookDomainLabel.setText("Book Domain");

        subjectabbreviationLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        subjectabbreviationLabel.setForeground(new java.awt.Color(131, 56, 209));
        subjectabbreviationLabel.setText("Subject Abbreviation");

        bookSearchResultScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        bookSearchResultTable.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        bookSearchResultTable.setForeground(new java.awt.Color(131, 56, 209));
        bookSearchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Book Author", "Book Title", "No Of Copies", "Available Copies", "Cupboard No", "Shelf No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookSearchResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        bookSearchResultTable.setGridColor(new java.awt.Color(255, 255, 255));
        bookSearchResultTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        bookSearchResultTable.setName(""); // NOI18N
        bookSearchResultTable.setRowHeight(35);
        bookSearchResultTable.setSelectionBackground(new java.awt.Color(203, 192, 235));
        bookSearchResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        bookSearchResultTable.setShowHorizontalLines(false);
        bookSearchResultTable.setShowVerticalLines(false);
        bookSearchResultTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                bookSearchResultTableComponentResized(evt);
            }
        });
        bookSearchResultScrollPane.setViewportView(bookSearchResultTable);
        if (bookSearchResultTable.getColumnModel().getColumnCount() > 0) {
            bookSearchResultTable.getColumnModel().getColumn(0).setMinWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(0).setMaxWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(1).setMinWidth(200);
            bookSearchResultTable.getColumnModel().getColumn(2).setMinWidth(200);
            bookSearchResultTable.getColumnModel().getColumn(3).setMinWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(3).setMaxWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(4).setMinWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(4).setMaxWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(5).setMinWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(5).setMaxWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(6).setMinWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(6).setPreferredWidth(100);
            bookSearchResultTable.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        bookIssueButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        bookIssueButton.setForeground(new java.awt.Color(131, 56, 209));
        bookIssueButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/IssueButton.png"))); // NOI18N
        bookIssueButton.setText("Issue");
        bookIssueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIssueButtonActionPerformed(evt);
            }
        });

        bookSearchButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        bookSearchButton.setForeground(new java.awt.Color(131, 56, 209));
        bookSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/SearchButton.png"))); // NOI18N
        bookSearchButton.setText("Search");
        bookSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookIssuePanelLayout = new javax.swing.GroupLayout(bookIssuePanel);
        bookIssuePanel.setLayout(bookIssuePanelLayout);
        bookIssuePanelLayout.setHorizontalGroup(
            bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookIssuePanelLayout.createSequentialGroup()
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bookAuthorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(bookAuthorText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bookTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(bookTitleText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bookDomainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(bookDomainText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookIssuePanelLayout.createSequentialGroup()
                        .addComponent(subjectAbbreviationText, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookIssueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(subjectabbreviationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(bookSearchResultScrollPane)
        );
        bookIssuePanelLayout.setVerticalGroup(
            bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookIssuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookAuthorLabel)
                    .addComponent(bookTitleLabel)
                    .addComponent(bookDomainLabel)
                    .addComponent(subjectabbreviationLabel))
                .addGap(1, 1, 1)
                .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookSearchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bookIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bookTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookDomainText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookAuthorText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(subjectAbbreviationText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookIssueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookSearchResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        navigationTabbedPane.addTab(" Book Issue ", bookIssuePanel);

        reportIssuePanel.setBackground(new java.awt.Color(235, 232, 247));

        reportTitleText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        reportTitleText.setForeground(new java.awt.Color(131, 106, 209));
        reportTitleText.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(131, 106, 209), 1, true));

        reportDomainText1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        reportDomainText1.setForeground(new java.awt.Color(131, 106, 209));
        reportDomainText1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(131, 106, 209), 1, true));
        reportDomainText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportDomainText1ActionPerformed(evt);
            }
        });

        reportTitleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        reportTitleLabel.setForeground(new java.awt.Color(131, 56, 209));
        reportTitleLabel.setText("Report Title");

        reportDomainLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        reportDomainLabel.setForeground(new java.awt.Color(131, 56, 209));
        reportDomainLabel.setText("Report Domain");

        reportSearchButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        reportSearchButton.setForeground(new java.awt.Color(131, 56, 209));
        reportSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/SearchButton.png"))); // NOI18N
        reportSearchButton.setText("Search");
        reportSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportSearchButtonActionPerformed(evt);
            }
        });

        reportIssueButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        reportIssueButton.setForeground(new java.awt.Color(131, 56, 209));
        reportIssueButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/IssueButton.png"))); // NOI18N
        reportIssueButton.setText("Issue");
        reportIssueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportIssueButtonActionPerformed(evt);
            }
        });

        reportSearchResultScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        reportSearchResultTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        reportSearchResultTable.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        reportSearchResultTable.setForeground(new java.awt.Color(131, 56, 209));
        reportSearchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Report ID", "Report Title", "Availability", "Cupboard No", "Shelf No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportSearchResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        reportSearchResultTable.setGridColor(new java.awt.Color(255, 255, 255));
        reportSearchResultTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        reportSearchResultTable.setName(""); // NOI18N
        reportSearchResultTable.setRowHeight(35);
        reportSearchResultTable.setSelectionBackground(new java.awt.Color(203, 192, 235));
        reportSearchResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        reportSearchResultTable.setShowHorizontalLines(false);
        reportSearchResultTable.setShowVerticalLines(false);
        reportSearchResultTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                reportSearchResultTableComponentResized(evt);
            }
        });
        reportSearchResultScrollPane.setViewportView(reportSearchResultTable);
        if (reportSearchResultTable.getColumnModel().getColumnCount() > 0) {
            reportSearchResultTable.getColumnModel().getColumn(0).setMinWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(0).setMaxWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(0).setHeaderValue("Report ID");
            reportSearchResultTable.getColumnModel().getColumn(1).setMinWidth(200);
            reportSearchResultTable.getColumnModel().getColumn(1).setHeaderValue("Report Title");
            reportSearchResultTable.getColumnModel().getColumn(2).setMinWidth(150);
            reportSearchResultTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            reportSearchResultTable.getColumnModel().getColumn(2).setMaxWidth(150);
            reportSearchResultTable.getColumnModel().getColumn(2).setHeaderValue("Availability");
            reportSearchResultTable.getColumnModel().getColumn(3).setMinWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(3).setMaxWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(3).setHeaderValue("Cupboard No");
            reportSearchResultTable.getColumnModel().getColumn(4).setMinWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(4).setMaxWidth(100);
            reportSearchResultTable.getColumnModel().getColumn(4).setHeaderValue("Shelf No");
        }

        javax.swing.GroupLayout reportIssuePanelLayout = new javax.swing.GroupLayout(reportIssuePanel);
        reportIssuePanel.setLayout(reportIssuePanelLayout);
        reportIssuePanelLayout.setHorizontalGroup(
            reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportSearchResultScrollPane)
            .addGroup(reportIssuePanelLayout.createSequentialGroup()
                .addGroup(reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(reportTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .addComponent(reportTitleText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reportDomainText1)
                    .addComponent(reportDomainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(reportSearchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportIssueButton))
        );
        reportIssuePanelLayout.setVerticalGroup(
            reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportIssuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportDomainLabel)
                    .addComponent(reportTitleLabel))
                .addGap(0, 0, 0)
                .addGroup(reportIssuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportDomainText1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportIssueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportSearchResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        navigationTabbedPane.addTab(" Report Issue ", reportIssuePanel);

        returnRenewPanel.setBackground(new java.awt.Color(235, 232, 247));

        usernameForPRText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        usernameForPRText.setForeground(new java.awt.Color(131, 56, 209));
        usernameForPRText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 56, 209)));
        usernameForPRText.setSelectionColor(new java.awt.Color(203, 192, 235));

        usernameForPRLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        usernameForPRLabel.setForeground(new java.awt.Color(131, 56, 209));
        usernameForPRLabel.setText("Username");

        returnBookButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        returnBookButton.setForeground(new java.awt.Color(131, 56, 209));
        returnBookButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/ReturnButton.png"))); // NOI18N
        returnBookButton.setText("Return Book");
        returnBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookButtonActionPerformed(evt);
            }
        });

        searchPendingRecordButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        searchPendingRecordButton.setForeground(new java.awt.Color(131, 56, 209));
        searchPendingRecordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/SearchButton.png"))); // NOI18N
        searchPendingRecordButton.setText("Search");
        searchPendingRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPendingRecordButtonActionPerformed(evt);
            }
        });

        renewBookButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        renewBookButton.setForeground(new java.awt.Color(131, 56, 209));
        renewBookButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/RenewButton.png"))); // NOI18N
        renewBookButton.setText("Renew Book");
        renewBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewBookButtonActionPerformed(evt);
            }
        });

        returnReportButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        returnReportButton.setForeground(new java.awt.Color(131, 56, 209));
        returnReportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/ReturnButton.png"))); // NOI18N
        returnReportButton.setText("Return Report");
        returnReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnReportButtonActionPerformed(evt);
            }
        });

        pendingBookResultScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        pendingBookResultTable.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        pendingBookResultTable.setForeground(new java.awt.Color(131, 56, 209));
        pendingBookResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Book Title", "Date of Issue", "Due Days", "Fine Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingBookResultTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pendingBookResultTable.setRowHeight(35);
        pendingBookResultTable.setSelectionBackground(new java.awt.Color(203, 192, 235));
        pendingBookResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pendingBookResultTable.setShowHorizontalLines(false);
        pendingBookResultTable.setShowVerticalLines(false);
        pendingBookResultScrollPane.setViewportView(pendingBookResultTable);
        if (pendingBookResultTable.getColumnModel().getColumnCount() > 0) {
            pendingBookResultTable.getColumnModel().getColumn(0).setMinWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(0).setMaxWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(2).setMinWidth(150);
            pendingBookResultTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            pendingBookResultTable.getColumnModel().getColumn(2).setMaxWidth(150);
            pendingBookResultTable.getColumnModel().getColumn(3).setMinWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(3).setMaxWidth(100);
            pendingBookResultTable.getColumnModel().getColumn(4).setMinWidth(150);
            pendingBookResultTable.getColumnModel().getColumn(4).setPreferredWidth(150);
            pendingBookResultTable.getColumnModel().getColumn(4).setMaxWidth(150);
        }

        pendingReportResultScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        pendingReportResultTable.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        pendingReportResultTable.setForeground(new java.awt.Color(131, 56, 209));
        pendingReportResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Report ID", "Report Title", "Date of Isssue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingReportResultTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pendingReportResultTable.setRowHeight(35);
        pendingReportResultTable.setSelectionBackground(new java.awt.Color(203, 192, 235));
        pendingReportResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pendingReportResultTable.setShowHorizontalLines(false);
        pendingReportResultTable.setShowVerticalLines(false);
        pendingReportResultScrollPane.setViewportView(pendingReportResultTable);
        if (pendingReportResultTable.getColumnModel().getColumnCount() > 0) {
            pendingReportResultTable.getColumnModel().getColumn(0).setMinWidth(100);
            pendingReportResultTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            pendingReportResultTable.getColumnModel().getColumn(0).setMaxWidth(100);
            pendingReportResultTable.getColumnModel().getColumn(2).setMinWidth(150);
            pendingReportResultTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            pendingReportResultTable.getColumnModel().getColumn(2).setMaxWidth(150);
        }

        javax.swing.GroupLayout returnRenewPanelLayout = new javax.swing.GroupLayout(returnRenewPanel);
        returnRenewPanel.setLayout(returnRenewPanelLayout);
        returnRenewPanelLayout.setHorizontalGroup(
            returnRenewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pendingBookResultScrollPane)
            .addGroup(returnRenewPanelLayout.createSequentialGroup()
                .addGroup(returnRenewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(returnRenewPanelLayout.createSequentialGroup()
                        .addComponent(usernameForPRText, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchPendingRecordButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnBookButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renewBookButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnReportButton))
                    .addComponent(usernameForPRLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
            .addComponent(pendingReportResultScrollPane)
        );
        returnRenewPanelLayout.setVerticalGroup(
            returnRenewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnRenewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameForPRLabel)
                .addGap(0, 0, 0)
                .addGroup(returnRenewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameForPRText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPendingRecordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renewBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendingBookResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pendingReportResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
        );

        navigationTabbedPane.addTab(" Return - Renew ", returnRenewPanel);

        usersPanel.setBackground(new java.awt.Color(235, 232, 247));

        usernameForUsersText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        usernameForUsersText.setForeground(new java.awt.Color(131, 56, 209));
        usernameForUsersText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 56, 209)));
        usernameForUsersText.setSelectionColor(new java.awt.Color(203, 192, 235));

        usernameForUsersLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        usernameForUsersLabel.setForeground(new java.awt.Color(131, 56, 209));
        usernameForUsersLabel.setText("Username");

        searchUserButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        searchUserButton.setForeground(new java.awt.Color(131, 56, 209));
        searchUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/SearchButton.png"))); // NOI18N
        searchUserButton.setText("Search");
        searchUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserButtonActionPerformed(evt);
            }
        });

        verifyButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        verifyButton.setForeground(new java.awt.Color(131, 56, 209));
        verifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/VerifyButton.png"))); // NOI18N
        verifyButton.setText("Verify");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        deleteUserProfileButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        deleteUserProfileButton.setForeground(new java.awt.Color(131, 56, 209));
        deleteUserProfileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/DeleteButton.png"))); // NOI18N
        deleteUserProfileButton.setText("Delete");
        deleteUserProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserProfileButtonActionPerformed(evt);
            }
        });

        clearanceButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        clearanceButton.setForeground(new java.awt.Color(131, 56, 209));
        clearanceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/ClearanceButton.png"))); // NOI18N
        clearanceButton.setText("Clearance");
        clearanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearanceButtonActionPerformed(evt);
            }
        });

        userSearchResultTable.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        userSearchResultTable.setForeground(new java.awt.Color(131, 56, 209));
        userSearchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Username", "First Name", "Last Name", "Email Address", "Mobile No", "Unique ID/ Employee No", "Academic Year", "Division", "Pending Record"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userSearchResultTable.setRowHeight(35);
        userSearchResultTable.setSelectionBackground(new java.awt.Color(203, 192, 235));
        userSearchResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userSearchResultTable.setShowHorizontalLines(false);
        userSearchResultTable.setShowVerticalLines(false);
        userSearchResultScrollPane.setViewportView(userSearchResultTable);
        if (userSearchResultTable.getColumnModel().getColumnCount() > 0) {
            userSearchResultTable.getColumnModel().getColumn(0).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(1).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(2).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(3).setMinWidth(250);
            userSearchResultTable.getColumnModel().getColumn(4).setMinWidth(150);
            userSearchResultTable.getColumnModel().getColumn(5).setMinWidth(150);
            userSearchResultTable.getColumnModel().getColumn(6).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(6).setPreferredWidth(100);
            userSearchResultTable.getColumnModel().getColumn(6).setMaxWidth(100);
            userSearchResultTable.getColumnModel().getColumn(7).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(7).setPreferredWidth(100);
            userSearchResultTable.getColumnModel().getColumn(7).setMaxWidth(100);
            userSearchResultTable.getColumnModel().getColumn(8).setMinWidth(100);
            userSearchResultTable.getColumnModel().getColumn(8).setPreferredWidth(100);
            userSearchResultTable.getColumnModel().getColumn(8).setMaxWidth(100);
        }

        emailText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        emailText.setForeground(new java.awt.Color(131, 56, 209));
        emailText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 56, 209)));
        emailText.setSelectionColor(new java.awt.Color(203, 192, 235));

        mobileText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        mobileText.setForeground(new java.awt.Color(131, 56, 209));
        mobileText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 56, 209)));
        mobileText.setSelectionColor(new java.awt.Color(203, 192, 235));

        emailForUsersLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        emailForUsersLabel.setForeground(new java.awt.Color(131, 56, 209));
        emailForUsersLabel.setText("Email address");

        mobilenoForUsersLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        mobilenoForUsersLabel.setForeground(new java.awt.Color(131, 56, 209));
        mobilenoForUsersLabel.setText("Mobile no");

        javax.swing.GroupLayout usersPanelLayout = new javax.swing.GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(verifyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteUserProfileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearanceButton))
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameForUsersText, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameForUsersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailForUsersLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mobileText)
                    .addComponent(mobilenoForUsersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchUserButton)
                .addContainerGap(181, Short.MAX_VALUE))
            .addComponent(userSearchResultScrollPane)
        );
        usersPanelLayout.setVerticalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameForUsersLabel)
                    .addComponent(emailForUsersLabel)
                    .addComponent(mobilenoForUsersLabel))
                .addGap(0, 0, 0)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameForUsersText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mobileText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userSearchResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteUserProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        navigationTabbedPane.addTab(" Users ", usersPanel);

        maintainancePanel.setBackground(new java.awt.Color(235, 232, 247));

        addBookTitleButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addBookTitleButton.setForeground(new java.awt.Color(131, 56, 209));
        addBookTitleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/AddButton.png"))); // NOI18N
        addBookTitleButton.setText("Book Title");
        addBookTitleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addBookTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookTitleButtonActionPerformed(evt);
            }
        });

        addReportButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addReportButton.setForeground(new java.awt.Color(131, 56, 209));
        addReportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/AddButton.png"))); // NOI18N
        addReportButton.setText("Report Title");
        addReportButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReportButtonActionPerformed(evt);
            }
        });

        updateDomainButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateDomainButton.setForeground(new java.awt.Color(131, 56, 209));
        updateDomainButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updateDomainButton.setText("Domain");
        updateDomainButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateDomainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDomainButtonActionPerformed(evt);
            }
        });

        addPublisherButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addPublisherButton.setForeground(new java.awt.Color(131, 56, 209));
        addPublisherButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/AddButton.png"))); // NOI18N
        addPublisherButton.setText("Publisher");
        addPublisherButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPublisherButtonActionPerformed(evt);
            }
        });

        addSubjectButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addSubjectButton.setForeground(new java.awt.Color(131, 56, 209));
        addSubjectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/AddButton.png"))); // NOI18N
        addSubjectButton.setText("Subject");
        addSubjectButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubjectButtonActionPerformed(evt);
            }
        });

        updateBookTitleButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateBookTitleButton.setForeground(new java.awt.Color(131, 56, 209));
        updateBookTitleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updateBookTitleButton.setText("Book Title");
        updateBookTitleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateBookTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookTitleButtonActionPerformed(evt);
            }
        });

        updateReportButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateReportButton.setForeground(new java.awt.Color(131, 56, 209));
        updateReportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updateReportButton.setText("Report Title");
        updateReportButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateReportButtonActionPerformed(evt);
            }
        });

        addDomainButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addDomainButton.setForeground(new java.awt.Color(131, 56, 209));
        addDomainButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/AddButton.png"))); // NOI18N
        addDomainButton.setText("Domain");
        addDomainButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addDomainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDomainButtonActionPerformed(evt);
            }
        });

        updatePublisherButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updatePublisherButton.setForeground(new java.awt.Color(131, 56, 209));
        updatePublisherButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updatePublisherButton.setText("Publisher");
        updatePublisherButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updatePublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePublisherButtonActionPerformed(evt);
            }
        });

        updateSubjectButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateSubjectButton.setForeground(new java.awt.Color(131, 56, 209));
        updateSubjectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        updateSubjectButton.setText("Subject");
        updateSubjectButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSubjectButtonActionPerformed(evt);
            }
        });

        catalogueLabel.setFont(new java.awt.Font("Century Schoolbook", 3, 28)); // NOI18N
        catalogueLabel.setForeground(new java.awt.Color(131, 56, 209));
        catalogueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        catalogueLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/64px/Catalogue.png"))); // NOI18N
        catalogueLabel.setText("Catalogue");

        openStorageDirectory.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        openStorageDirectory.setForeground(new java.awt.Color(131, 56, 209));
        openStorageDirectory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/OpenFileButton.png"))); // NOI18N
        openStorageDirectory.setText("Catalogue");
        openStorageDirectory.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        openStorageDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openStorageDirectoryActionPerformed(evt);
            }
        });

        clearAccountButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        clearAccountButton.setForeground(new java.awt.Color(131, 56, 209));
        clearAccountButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Account.png"))); // NOI18N
        clearAccountButton.setText("Clear & Account");
        clearAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAccountButtonActionPerformed(evt);
            }
        });

        editStoragePathButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        editStoragePathButton.setForeground(new java.awt.Color(131, 56, 209));
        editStoragePathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/StoragePath.png"))); // NOI18N
        editStoragePathButton.setText("Edit Storage Path");
        editStoragePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStoragePathButtonActionPerformed(evt);
            }
        });

        editConnectionButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        editConnectionButton.setForeground(new java.awt.Color(131, 56, 209));
        editConnectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Connection.png"))); // NOI18N
        editConnectionButton.setText("Edit Connection");
        editConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConnectionButtonActionPerformed(evt);
            }
        });

        resetStudentsVerificationButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        resetStudentsVerificationButton.setForeground(new java.awt.Color(131, 56, 209));
        resetStudentsVerificationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/ResetVerification.png"))); // NOI18N
        resetStudentsVerificationButton.setText("Reset Student's Verification");
        resetStudentsVerificationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetStudentsVerificationButtonActionPerformed(evt);
            }
        });

        addEditLabel.setFont(new java.awt.Font("Century Schoolbook", 3, 28)); // NOI18N
        addEditLabel.setForeground(new java.awt.Color(131, 56, 209));
        addEditLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addEditLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/64px/Edit2.png"))); // NOI18N
        addEditLabel.setText("Add-Edit");

        editConstraintsButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        editConstraintsButton.setForeground(new java.awt.Color(131, 56, 209));
        editConstraintsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/UpdateButton.png"))); // NOI18N
        editConstraintsButton.setText("Edit Constaraints");
        editConstraintsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConstraintsButtonActionPerformed(evt);
            }
        });

        addEditLabel1.setFont(new java.awt.Font("Century Schoolbook", 3, 28)); // NOI18N
        addEditLabel1.setForeground(new java.awt.Color(131, 56, 209));
        addEditLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addEditLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/64px/Setting.png"))); // NOI18N
        addEditLabel1.setText("Configure");

        aboutButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        aboutButton.setForeground(new java.awt.Color(131, 56, 209));
        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/About.png"))); // NOI18N
        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        yearLabel.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        yearLabel.setForeground(new java.awt.Color(131, 56, 209));
        yearLabel.setText("Year : ");

        yearText.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        yearText.setForeground(new java.awt.Color(131, 56, 209));
        yearText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        yearText.setSelectionColor(new java.awt.Color(203, 192, 235));
        yearText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yearTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearTextKeyTyped(evt);
            }
        });

        getAlumniListButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getAlumniListButton.setForeground(new java.awt.Color(131, 56, 209));
        getAlumniListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getAlumniListButton.setText("Alumni List");
        getAlumniListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getAlumniListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAlumniListButtonActionPerformed(evt);
            }
        });

        getOverDueLibraryRecordButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getOverDueLibraryRecordButton.setForeground(new java.awt.Color(131, 56, 209));
        getOverDueLibraryRecordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getOverDueLibraryRecordButton.setText("Over due records");
        getOverDueLibraryRecordButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getOverDueLibraryRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getOverDueLibraryRecordButtonActionPerformed(evt);
            }
        });

        getAccountListButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getAccountListButton.setForeground(new java.awt.Color(131, 56, 209));
        getAccountListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getAccountListButton.setText("Accounts");
        getAccountListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getAccountListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAccountListButtonActionPerformed(evt);
            }
        });

        getSubjectListButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getSubjectListButton.setForeground(new java.awt.Color(131, 56, 209));
        getSubjectListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getSubjectListButton.setText("Subjects List");
        getSubjectListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getSubjectListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSubjectListButtonActionPerformed(evt);
            }
        });

        getPublisherButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getPublisherButton.setForeground(new java.awt.Color(131, 56, 209));
        getPublisherButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getPublisherButton.setText("Publishers List");
        getPublisherButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPublisherButtonActionPerformed(evt);
            }
        });

        getPublisherListButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getPublisherListButton.setForeground(new java.awt.Color(131, 56, 209));
        getPublisherListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getPublisherListButton.setText("Domains List");
        getPublisherListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getPublisherListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPublisherListButtonActionPerformed(evt);
            }
        });

        getBookTitlesButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getBookTitlesButton.setForeground(new java.awt.Color(131, 56, 209));
        getBookTitlesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getBookTitlesButton.setText("Book Titles");
        getBookTitlesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getBookTitlesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getBookTitlesButtonActionPerformed(evt);
            }
        });

        getReportTitlesButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getReportTitlesButton.setForeground(new java.awt.Color(131, 56, 209));
        getReportTitlesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getReportTitlesButton.setText("Report Titles");
        getReportTitlesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getReportTitlesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getReportTitlesButtonActionPerformed(evt);
            }
        });

        getPendingLibraryRecordsButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        getPendingLibraryRecordsButton.setForeground(new java.awt.Color(131, 56, 209));
        getPendingLibraryRecordsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/Sheet.png"))); // NOI18N
        getPendingLibraryRecordsButton.setText("Pending records");
        getPendingLibraryRecordsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getPendingLibraryRecordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPendingLibraryRecordsButtonActionPerformed(evt);
            }
        });

        deleteLibraryContentButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        deleteLibraryContentButton.setForeground(new java.awt.Color(131, 56, 209));
        deleteLibraryContentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32px/DeleteButton.png"))); // NOI18N
        deleteLibraryContentButton.setText("Delete Content");
        deleteLibraryContentButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteLibraryContentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLibraryContentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout maintainancePanelLayout = new javax.swing.GroupLayout(maintainancePanel);
        maintainancePanel.setLayout(maintainancePanelLayout);
        maintainancePanelLayout.setHorizontalGroup(
            maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintainancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(maintainancePanelLayout.createSequentialGroup()
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addEditLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(catalogueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(maintainancePanelLayout.createSequentialGroup()
                                    .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addBookTitleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(updateBookTitleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addSubjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(updateSubjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(maintainancePanelLayout.createSequentialGroup()
                                            .addComponent(updateDomainButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(updatePublisherButton))
                                        .addGroup(maintainancePanelLayout.createSequentialGroup()
                                            .addComponent(addDomainButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(addPublisherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(maintainancePanelLayout.createSequentialGroup()
                                    .addComponent(getPublisherListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(getOverDueLibraryRecordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(getPendingLibraryRecordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(openStorageDirectory)))
                            .addGroup(maintainancePanelLayout.createSequentialGroup()
                                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, maintainancePanelLayout.createSequentialGroup()
                                        .addComponent(getBookTitlesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(getReportTitlesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, maintainancePanelLayout.createSequentialGroup()
                                        .addComponent(yearLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(getAlumniListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(getPublisherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteLibraryContentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(getAccountListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(getSubjectListButton, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)))))
                    .addGroup(maintainancePanelLayout.createSequentialGroup()
                        .addComponent(addEditLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(maintainancePanelLayout.createSequentialGroup()
                                .addComponent(clearAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editConstraintsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetStudentsVerificationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(maintainancePanelLayout.createSequentialGroup()
                                .addComponent(editStoragePathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editConnectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aboutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        maintainancePanelLayout.setVerticalGroup(
            maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintainancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(maintainancePanelLayout.createSequentialGroup()
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getAlumniListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteLibraryContentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getAccountListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(getBookTitlesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getReportTitlesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getSubjectListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(getPublisherListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getOverDueLibraryRecordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getPendingLibraryRecordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openStorageDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(catalogueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(maintainancePanelLayout.createSequentialGroup()
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDomainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBookTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addSubjectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateSubjectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBookTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateDomainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatePublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addEditLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(maintainancePanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editConstraintsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetStudentsVerificationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(maintainancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aboutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editConnectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editStoragePathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, maintainancePanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(addEditLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(152, Short.MAX_VALUE))
        );

        navigationTabbedPane.addTab(" Maintainance ", maintainancePanel);

        interfaceIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/96px/DepartmentalLibrary.png"))); // NOI18N
        interfaceIconLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));

        resultWindowScrollPane.setBackground(new java.awt.Color(235, 232, 247));
        resultWindowScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));

        resultWindowTextArea.setEditable(false);
        resultWindowTextArea.setBackground(new java.awt.Color(235, 232, 247));
        resultWindowTextArea.setColumns(20);
        resultWindowTextArea.setFont(new java.awt.Font("Century Schoolbook", 3, 24)); // NOI18N
        resultWindowTextArea.setForeground(new java.awt.Color(131, 56, 209));
        resultWindowTextArea.setRows(5);
        resultWindowTextArea.setText(" Welcome to SKNCOE Computer Department Library");
        resultWindowTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 106, 209)));
        resultWindowTextArea.setSelectionColor(new java.awt.Color(203, 192, 235));
        resultWindowScrollPane.setViewportView(resultWindowTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(navigationTabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(interfaceIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultWindowScrollPane)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultWindowScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interfaceIconLabel))
                .addGap(18, 18, 18)
                .addComponent(navigationTabbedPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bookDomainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDomainTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookDomainTextActionPerformed

    private void bookSearchResultTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bookSearchResultTableComponentResized
        // TODO add your handling code here
    }//GEN-LAST:event_bookSearchResultTableComponentResized

    private void bookIssueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIssueButtonActionPerformed
        int selectedRow = bookSearchResultTable.getSelectedRow();
        if (selectedRow != -1) {
            String book_id = String.valueOf(bookSearchResultTable.getModel().getValueAt(selectedRow, 0));
            if ((int) bookSearchResultTable.getModel().getValueAt(selectedRow, 4) != 0) {
                issueBookForm = new IssueBookForm(book_id);
                issueBookForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                ImageIcon logo;
                logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                issueBookForm.setIconImage(logo.getImage());
                issueBookForm.setLocationRelativeTo(null);
                issueBookForm.pack();
                GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                issueBookForm.setVisible(true);
            } else {
                this.showRequestResult("selected book is currently unavailable");
            }
        } else {
            this.showRequestResult("please select book from book search");
        }
    }//GEN-LAST:event_bookIssueButtonActionPerformed

    private void bookSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSearchButtonActionPerformed
        BookSearchAttributes book_query = new BookSearchAttributes();
        boolean queryEntered = false;
        if (!bookAuthorText.getText().equals("")) {
            queryEntered = true;
            book_query.book_author = "%" + bookAuthorText.getText() + "%";
        } else {
            book_query.book_author = "%";
        }
        if (!bookTitleText.getText().equals("")) {
            queryEntered = true;
            book_query.book_title = "%" + bookTitleText.getText() + "%";
        } else {
            book_query.book_title = "%";
        }
        if (!bookDomainText.getText().equals("")) {
            queryEntered = true;
            book_query.domain_name = "%" + bookDomainText.getText() + "%";
        } else {
            book_query.domain_name = "%";
        }
        if (!subjectAbbreviationText.getText().equals("")) {
            queryEntered = true;
            book_query.subject_abbreviation = "%" + subjectAbbreviationText.getText() + "%";
        } else {
            book_query.subject_abbreviation = "%";
        }
        if (queryEntered) {
            try {
                DefaultTableModel tableModel = (DefaultTableModel) bookSearchResultTable.getModel();
                List<BookSearchQueryResult> book_query_result_set = ServerRequests.getBookSearchResult(book_query);
                if (book_query_result_set.size() > 0) {
                    Object row[] = new Object[7];
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    for (int i = 0; i < book_query_result_set.size(); i++) {
                        row[0] = book_query_result_set.get(i).book_id;
                        row[1] = book_query_result_set.get(i).book_author;
                        row[2] = book_query_result_set.get(i).book_title;
                        row[3] = book_query_result_set.get(i).no_of_copies;
                        row[4] = book_query_result_set.get(i).available_copies;
                        row[5] = book_query_result_set.get(i).cupboard_no;
                        row[6] = book_query_result_set.get(i).shelf_no;
                        tableModel.addRow(row);
                    }
                    GUI.libraryInchargeInterfacePanel.showRequestResult(book_query_result_set.size() + " result(s) found");
                } else {
                    tableModel.getDataVector().removeAllElements();
                    bookSearchResultTable.repaint();
                    GUI.libraryInchargeInterfacePanel.showRequestResult("no result found.");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "enter at least one attribute for search");
        }
    }//GEN-LAST:event_bookSearchButtonActionPerformed

    private void reportIssueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportIssueButtonActionPerformed
        int selectedRow = reportSearchResultTable.getSelectedRow();
        if (selectedRow != -1) {
            String report_id = String.valueOf(reportSearchResultTable.getModel().getValueAt(selectedRow, 0));
            if ((int) reportSearchResultTable.getModel().getValueAt(selectedRow, 2) != 0) {
                issueReportForm = new IssueReportForm(report_id);
                issueReportForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                ImageIcon logo;
                logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                issueReportForm.setIconImage(logo.getImage());
                issueReportForm.setLocationRelativeTo(null);
                issueReportForm.pack();
                GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                issueReportForm.setVisible(true);
            } else {
                this.showRequestResult("selected report is currently unavailable");
            }
        } else {
            this.showRequestResult("please select report from report search");
        }
    }//GEN-LAST:event_reportIssueButtonActionPerformed

    private void reportSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportSearchButtonActionPerformed
        ReportSearchAttributes report_query = new ReportSearchAttributes();
        boolean queryEntered = false;
        if (!reportTitleText.getText().equals("")) {
            queryEntered = true;
            report_query.report_title = "%" + reportTitleText.getText() + "%";
        } else {
            report_query.report_title = "%";
        }
        if (!reportDomainText1.getText().equals("")) {
            queryEntered = true;
            report_query.domain_name = "%" + reportDomainText1.getText() + "%";
        } else {
            report_query.domain_name = "%";
        }
        if (queryEntered) {
            DefaultTableModel tableModel = (DefaultTableModel) reportSearchResultTable.getModel();
            try {
                List<ReportSearchQueryResult> report_query_result_set = ServerRequests.getReportSearchResult(report_query);
                if (report_query_result_set.size() > 0) {
                    Object row[] = new Object[5];
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    for (int i = 0; i < report_query_result_set.size(); i++) {
                        row[0] = report_query_result_set.get(i).report_id;
                        row[1] = report_query_result_set.get(i).report_title;
                        row[2] = report_query_result_set.get(i).availability_status;
                        row[3]=report_query_result_set.get(i).cupboard_no;
                        row[4]=report_query_result_set.get(i).shelf_no;
                        tableModel.addRow(row);
                    }
                    GUI.libraryInchargeInterfacePanel.showRequestResult(report_query_result_set.size() + " result(s) found");
                } else {
                    tableModel.getDataVector().removeAllElements();
                    reportSearchResultTable.repaint();
                    GUI.libraryInchargeInterfacePanel.showRequestResult("no result found");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "enter at least one attribute for search");
        }
    }//GEN-LAST:event_reportSearchButtonActionPerformed

    private void reportDomainText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportDomainText1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reportDomainText1ActionPerformed

    private void reportSearchResultTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_reportSearchResultTableComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_reportSearchResultTableComponentResized

    private void returnBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookButtonActionPerformed
        int selectedRow = pendingBookResultTable.getSelectedRow();
        if (selectedRow != -1 && !usernameForPRText.getText().equals("")) {
            String username = usernameForPRText.getText();
            int book_id = (int) pendingBookResultTable.getModel().getValueAt(selectedRow, 0);
            String book_title = String.valueOf(pendingBookResultTable.getModel().getValueAt(selectedRow, 1));
            String fine_amount = String.valueOf(pendingBookResultTable.getModel().getValueAt(selectedRow, 4));
            ReturnBookForm retunBookForm = new ReturnBookForm(selectedRow, username, book_id, book_title, fine_amount);
            retunBookForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo;
            logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            retunBookForm.setIconImage(logo.getImage());
            retunBookForm.setLocationRelativeTo(null);
            retunBookForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            retunBookForm.setVisible(true);
        } else if (selectedRow == -1) {
            this.showRequestResult("select book from pending books to return");
        } else {
            this.showRequestResult("enter username & search for pending records to return book");
        }
    }//GEN-LAST:event_returnBookButtonActionPerformed

    private void returnReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnReportButtonActionPerformed
        int selectedRow = pendingReportResultTable.getSelectedRow();

        if (selectedRow != -1 && !usernameForPRText.getText().equals("")) {
            String username = usernameForPRText.getText();
            int report_id = (int) pendingReportResultTable.getModel().getValueAt(selectedRow, 0);
            String report_title = String.valueOf(pendingReportResultTable.getModel().getValueAt(selectedRow, 1));
            ReturnReportForm retunReportForm = new ReturnReportForm(selectedRow, username, report_id, report_title);
            retunReportForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo;
            logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            retunReportForm.setIconImage(logo.getImage());
            retunReportForm.setLocationRelativeTo(null);
            retunReportForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            retunReportForm.setVisible(true);
        } else if (selectedRow == -1) {
            this.showRequestResult("select report from pending reports to return");
        } else {
            this.showRequestResult("enter username & search for pending records to return report");
        }
    }//GEN-LAST:event_returnReportButtonActionPerformed

    private void resetStudentsVerificationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetStudentsVerificationButtonActionPerformed
        try {
            ResetStudentVerificationForm resetStudentVerificationForm = new ResetStudentVerificationForm();
            resetStudentVerificationForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo;
            logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            resetStudentVerificationForm.setIconImage(logo.getImage());
            resetStudentVerificationForm.setLocationRelativeTo(null);
            resetStudentVerificationForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            resetStudentVerificationForm.setVisible(true);
        } catch (UnknownHostException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetStudentsVerificationButtonActionPerformed

    private void editConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConnectionButtonActionPerformed
        ConnectionDetails connectionDetails = new ConnectionDetails();
        connectionDetails = ConnectionDetails.getConnectionDetails(connectionDetails);
        if (connectionDetails.portAddress == 0) {
            connectionDetails.ipAddress = "localhost";
        }
        EditConnectionForm editConnectionForm = new EditConnectionForm(connectionDetails, false);
        editConnectionForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
        ImageIcon logo;
        logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
        editConnectionForm.setIconImage(logo.getImage());
        editConnectionForm.setLocationRelativeTo(null);
        editConnectionForm.pack();
        GUI.libraryInchargeInterfaceFrame.setEnabled(false);
        editConnectionForm.setVisible(true);
    }//GEN-LAST:event_editConnectionButtonActionPerformed

    private void editStoragePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStoragePathButtonActionPerformed
        StoragePath storagePath = new StoragePath();
        storagePath = StoragePath.getStoragePath(storagePath);
        if (storagePath.path.equals("PATH_NOT_FOUND")) {
            storagePath.path = "path is not set";
        }
        EditStoragePathForm editStoragePathForm = new EditStoragePathForm(storagePath);
        editStoragePathForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
        ImageIcon logo;
        logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
        editStoragePathForm.setIconImage(logo.getImage());
        editStoragePathForm.setLocationRelativeTo(null);
        editStoragePathForm.pack();
        GUI.libraryInchargeInterfaceFrame.setEnabled(false);
        editStoragePathForm.setVisible(true);
    }//GEN-LAST:event_editStoragePathButtonActionPerformed

    private void clearAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAccountButtonActionPerformed
        try {
            this.showRequestResult(ServerRequests.clearAndAccountLibraryRecords());
        } catch (IOException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearAccountButtonActionPerformed

    private void getPublisherListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPublisherListButtonActionPerformed
        try {
            String result = Output.storeDomainsList();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getPublisherListButtonActionPerformed

    private void getPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPublisherButtonActionPerformed
        try {
            String result = Output.storePublishersList();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getPublisherButtonActionPerformed

    private void getSubjectListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSubjectListButtonActionPerformed
        try {
            String result = Output.storeSubjectsList();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getSubjectListButtonActionPerformed

    private void getAccountListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAccountListButtonActionPerformed
        try {
            String result = Output.storeAccounts();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getAccountListButtonActionPerformed

    private void getAlumniListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAlumniListButtonActionPerformed
        if (yearText.getText().equals("")) {
            this.showRequestResult("enter year to get alumni list");
        } else {
            try {
                String year = yearText.getText();
                String result = Output.storeAlumniStudentsList(year);
                switch (result) {
                    case "PATH_NOT_FOUND":
                        this.showRequestResult("storage path is not set, edit storage path");
                        break;
                    case "NOT_STORED":
                        this.showRequestResult("error occured while saving list into file");
                        break;
                    case "EMPTY_FILE":
                        this.showRequestResult("no results returned");
                        break;
                    default:
                        this.showRequestResult(result);
                        break;
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_getAlumniListButtonActionPerformed

    private void openStorageDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openStorageDirectoryActionPerformed
        StoragePath storagePath = new StoragePath();
        storagePath = StoragePath.getStoragePath(storagePath);
        if (storagePath.path.equals("PATH_NOT_FOUND")) {
            this.showRequestResult("storage path is not set, edit storage path");
        }
        String stringStoragePath = storagePath.path;
        File storageDirectory = new File(stringStoragePath + "/CDIS_DATA");
        if (!storageDirectory.exists()) {
            this.showRequestResult("storage directory : \n " + storageDirectory.getAbsolutePath() + " is empty");
        } else {
            try {
                Desktop.getDesktop().open(storageDirectory);
                this.showRequestResult("storage directory : \n " + storageDirectory.getAbsolutePath() + " is opened");
            } catch (IOException ex) {
                this.showRequestResult("Failed to open storage directory: \n " + storageDirectory.getAbsolutePath());
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openStorageDirectoryActionPerformed

    private void getOverDueLibraryRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getOverDueLibraryRecordButtonActionPerformed
        try {
            String result = Output.storeUsersWithOverDuePendingRecords();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getOverDueLibraryRecordButtonActionPerformed

    private void updatePublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePublisherButtonActionPerformed
        try {
            UpdatePublisherForm updatePublisherForm;
            updatePublisherForm = new UpdatePublisherForm(ServerRequests.getPublisherList());
            updatePublisherForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            updatePublisherForm.setIconImage(logo.getImage());
            updatePublisherForm.setLocationRelativeTo(null);
            updatePublisherForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            updatePublisherForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updatePublisherButtonActionPerformed

    private void addDomainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDomainButtonActionPerformed
        AddDomainForm addDomainForm;
        addDomainForm = new AddDomainForm();
        addDomainForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
        ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
        addDomainForm.setIconImage(logo.getImage());
        addDomainForm.setLocationRelativeTo(null);
        addDomainForm.pack();
        GUI.libraryInchargeInterfaceFrame.setEnabled(false);
        addDomainForm.setVisible(true);
    }//GEN-LAST:event_addDomainButtonActionPerformed

    private void addPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPublisherButtonActionPerformed
        AddPublisherForm addPublisherForm;
        addPublisherForm = new AddPublisherForm();
        addPublisherForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
        ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
        addPublisherForm.setIconImage(logo.getImage());
        addPublisherForm.setLocationRelativeTo(null);
        addPublisherForm.pack();
        GUI.libraryInchargeInterfaceFrame.setEnabled(false);
        addPublisherForm.setVisible(true);
    }//GEN-LAST:event_addPublisherButtonActionPerformed

    private void updateDomainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDomainButtonActionPerformed
        try {
            UpdateDomainForm updateDomainForm;
            updateDomainForm = new UpdateDomainForm(ServerRequests.getDomainList());
            updateDomainForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            updateDomainForm.setIconImage(logo.getImage());
            updateDomainForm.setLocationRelativeTo(null);
            updateDomainForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            updateDomainForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateDomainButtonActionPerformed

    private void editConstraintsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConstraintsButtonActionPerformed
        try {
            UpdateBookIssueConstraintsForm updateBookIssueConstraintsForm;
            updateBookIssueConstraintsForm = new UpdateBookIssueConstraintsForm(ServerRequests.getBookIssueConstraintsQueryResults());
            updateBookIssueConstraintsForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            updateBookIssueConstraintsForm.setIconImage(logo.getImage());
            updateBookIssueConstraintsForm.setLocationRelativeTo(null);
            updateBookIssueConstraintsForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            updateBookIssueConstraintsForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editConstraintsButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        AboutForm aboutForm;
        aboutForm = new AboutForm();
        aboutForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
        ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
        aboutForm.setIconImage(logo.getImage());
        aboutForm.setLocationRelativeTo(null);
        aboutForm.pack();
        GUI.libraryInchargeInterfaceFrame.setEnabled(false);
        aboutForm.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void searchUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserButtonActionPerformed
        UserSearchAttributes user_search_query = new UserSearchAttributes();
        boolean queryEntered = false;
        if (!usernameForUsersText.getText().equals("")) {
            queryEntered = true;
            user_search_query.username = "%" + usernameForUsersText.getText() + "%";
        } else {
            user_search_query.username = "%";
        }
        if (!emailText.getText().equals("")) {
            queryEntered = true;
            user_search_query.email = "%" + emailText.getText() + "%";
        } else {
            user_search_query.email = "%";
        }
        if (!mobileText.getText().equals("")) {
            queryEntered = true;
            user_search_query.mobile_no = "%" + mobileText.getText() + "%";
        } else {
            user_search_query.mobile_no = "%";
        }
        if (queryEntered) {
            try {
                DefaultTableModel tableModel = (DefaultTableModel) userSearchResultTable.getModel();
                List<UserProfileQueryResult> user_search_query_result_set;
                user_search_query_result_set = ServerRequests.getUserSearchResult(user_search_query);
                if (user_search_query_result_set.size() > 0) {
                    Object row[] = new Object[9];
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    for (int i = 0; i < user_search_query_result_set.size(); i++) {
                        if (user_search_query_result_set.get(i).user_role.equals("S")) {
                            row[0] = user_search_query_result_set.get(i).student.username;
                            row[1] = user_search_query_result_set.get(i).student.first_name;
                            row[2] = user_search_query_result_set.get(i).student.last_name;
                            row[3] = user_search_query_result_set.get(i).student.email;
                            row[4] = user_search_query_result_set.get(i).student.mobile_no;
                            row[5] = user_search_query_result_set.get(i).student.unique_id;
                            row[6] = user_search_query_result_set.get(i).student.academic_year;
                            row[7] = user_search_query_result_set.get(i).student.division;
                            if (user_search_query_result_set.get(i).has_pending_library_record) {
                                row[8] = "yes";
                            } else {
                                row[8] = "no";
                            }
                            tableModel.addRow(row);
                        } else if (user_search_query_result_set.get(i).user_role.equals("E")) {
                            row[0] = user_search_query_result_set.get(i).employee.username;
                            row[1] = user_search_query_result_set.get(i).employee.first_name;
                            row[2] = user_search_query_result_set.get(i).employee.last_name;
                            row[3] = user_search_query_result_set.get(i).employee.email;
                            row[4] = user_search_query_result_set.get(i).employee.mobile_no;
                            row[5] = user_search_query_result_set.get(i).employee.employee_no;
                            row[6] = "N/A";
                            row[7] = "N/A";
                            if (user_search_query_result_set.get(i).has_pending_library_record) {
                                row[8] = "yes";
                            } else {
                                row[8] = "no";
                            }
                            tableModel.addRow(row);
                        }
                    }
                    GUI.libraryInchargeInterfacePanel.showRequestResult(user_search_query_result_set.size() + " result(s) found");
                } else {
                    tableModel.getDataVector().removeAllElements();
                    userSearchResultTable.repaint();
                    GUI.libraryInchargeInterfacePanel.showRequestResult("no result found.");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "enter at least one attribute for search");
        }
    }//GEN-LAST:event_searchUserButtonActionPerformed

    private void searchPendingRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPendingRecordButtonActionPerformed

        if (usernameForPRText.getText().equals("")) {
            this.showRequestResult("enter username to search pending records");
        } else {
            try {
                UserProfileRequestAttribute user_profile_query = new UserProfileRequestAttribute();
                user_profile_query.username = usernameForPRText.getText();
                List<PendingBooksRecordQueryResult> pending_book_records_result_set;
                pending_book_records_result_set = ServerRequests.getPendingBooksRecord(user_profile_query);
                DefaultTableModel pendingBookTableModel = (DefaultTableModel) pendingBookResultTable.getModel();
                if (pending_book_records_result_set.size() > 0) {
                    Object row[] = new Object[5];
                    pendingBookTableModel.getDataVector().removeAllElements();
                    pendingBookTableModel.fireTableDataChanged();
                    for (int i = 0; i < pending_book_records_result_set.size(); i++) {
                        row[0] = pending_book_records_result_set.get(i).book_id;
                        row[1] = pending_book_records_result_set.get(i).book_title;
                        row[2] = pending_book_records_result_set.get(i).date_of_issue;
                        row[3] = pending_book_records_result_set.get(i).due_days;
                        row[4] = pending_book_records_result_set.get(i).fine_amount;
                        pendingBookTableModel.addRow(row);
                    }
                } else {
                    pendingBookTableModel.getDataVector().removeAllElements();
                    pendingBookResultTable.repaint();
                }

                List<PendingReportRecordQueryResult> pending_report_records_result_set = ServerRequests.getPendingReportRecord(user_profile_query);
                DefaultTableModel pendingReportTableModel = (DefaultTableModel) pendingReportResultTable.getModel();
                if (pending_report_records_result_set.size() > 0) {
                    Object row[] = new Object[3];
                    pendingReportTableModel.getDataVector().removeAllElements();
                    pendingReportTableModel.fireTableDataChanged();
                    for (int i = 0; i < pending_report_records_result_set.size(); i++) {
                        row[0] = pending_report_records_result_set.get(i).report_id;
                        row[1] = pending_report_records_result_set.get(i).report_title;
                        row[2] = pending_report_records_result_set.get(i).date_of_issue;
                        pendingReportTableModel.addRow(row);
                    }
                } else {
                    pendingReportTableModel.getDataVector().removeAllElements();
                    pendingReportResultTable.repaint();
                }
                this.showRequestResult(pending_book_records_result_set.size() + " pending book(s) returned \n " + pending_report_records_result_set.size() + " pending report(s) returned");
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_searchPendingRecordButtonActionPerformed

    private void renewBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewBookButtonActionPerformed
        int selectedRow = pendingBookResultTable.getSelectedRow();
        if (selectedRow != -1 && !usernameForPRText.getText().equals("")) {
            String username = usernameForPRText.getText();
            int book_id = (int) pendingBookResultTable.getModel().getValueAt(selectedRow, 0);
            String book_title = String.valueOf(pendingBookResultTable.getModel().getValueAt(selectedRow, 1));
            String fine_amount = String.valueOf(pendingBookResultTable.getModel().getValueAt(selectedRow, 4));
            RenewBookForm renewBookForm = new RenewBookForm(selectedRow, username, book_id, book_title, fine_amount);
            renewBookForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo;
            logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            renewBookForm.setIconImage(logo.getImage());
            renewBookForm.setLocationRelativeTo(null);
            renewBookForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            renewBookForm.setVisible(true);
        } else if (selectedRow == -1) {
            this.showRequestResult("select book from pending books to renew");
        } else {
            this.showRequestResult("enter username & search for pending records to renew book");
        }
    }//GEN-LAST:event_renewBookButtonActionPerformed

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        int selectedRow = userSearchResultTable.getSelectedRow();
        if (selectedRow != -1) {
            try {
                String username = String.valueOf(userSearchResultTable.getModel().getValueAt(selectedRow, 0));
                UserProfileRequestAttribute user_profile_query = new UserProfileRequestAttribute();
                user_profile_query.username = username;
                UserProfileQueryResult user_profile = ServerRequests.getUserProfile(user_profile_query);
                if (user_profile.user_role.equals("S")) {
                    VerifyStudentForm verifyStudentForm = new VerifyStudentForm(user_profile.student, user_profile.has_pending_library_record, false, false, "");
                    verifyStudentForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                    ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                    verifyStudentForm.setIconImage(logo.getImage());
                    verifyStudentForm.setLocationRelativeTo(null);
                    verifyStudentForm.pack();
                    GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                    verifyStudentForm.setVisible(true);
                } else if (user_profile.user_role.equals("E")) {
                    VerifyEmployeeForm verifyEmployeeForm = new VerifyEmployeeForm(user_profile.employee, user_profile.has_pending_library_record, false, false, "");
                    verifyEmployeeForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                    ImageIcon logo;
                    logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                    verifyEmployeeForm.setIconImage(logo.getImage());
                    verifyEmployeeForm.setLocationRelativeTo(null);
                    verifyEmployeeForm.pack();
                    GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                    verifyEmployeeForm.setVisible(true);
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.showRequestResult("select user from user search result to verify profile");
        }
    }//GEN-LAST:event_verifyButtonActionPerformed

    private void deleteUserProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserProfileButtonActionPerformed
        int selectedRow = userSearchResultTable.getSelectedRow();
        if (selectedRow != -1) {
            try {
                String username = String.valueOf(userSearchResultTable.getModel().getValueAt(selectedRow, 0));
                UserProfileRequestAttribute user_profile_query = new UserProfileRequestAttribute();
                user_profile_query.username = username;
                UserProfileQueryResult user_profile = ServerRequests.getUserProfile(user_profile_query);
                if (user_profile.user_role.equals("S")) {
                    DeleteStudentProfileForm deleteStudentProfileForm;
                    deleteStudentProfileForm = new DeleteStudentProfileForm(selectedRow, user_profile.student, user_profile.has_pending_library_record);
                    deleteStudentProfileForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                    ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                    deleteStudentProfileForm.setIconImage(logo.getImage());
                    deleteStudentProfileForm.setLocationRelativeTo(null);
                    deleteStudentProfileForm.pack();
                    GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                    deleteStudentProfileForm.setVisible(true);
                } else if (user_profile.user_role.equals("E")) {
                    DeleteEmployeeProfileForm deleteEmployeeProfileForm = new DeleteEmployeeProfileForm(selectedRow, user_profile.employee, user_profile.has_pending_library_record);
                    deleteEmployeeProfileForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                    ImageIcon logo;
                    logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                    deleteEmployeeProfileForm.setIconImage(logo.getImage());
                    deleteEmployeeProfileForm.setLocationRelativeTo(null);
                    deleteEmployeeProfileForm.pack();
                    GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                    deleteEmployeeProfileForm.setVisible(true);
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.showRequestResult("select user from user search table to delete profile");
        }
    }//GEN-LAST:event_deleteUserProfileButtonActionPerformed

    private void addBookTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookTitleButtonActionPerformed
        try {
            AddBookTitleForm addBookTitleForm;
            addBookTitleForm = new AddBookTitleForm(ServerRequests.getPublisherList(), ServerRequests.getDomainList());
            addBookTitleForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            addBookTitleForm.setIconImage(logo.getImage());
            addBookTitleForm.setLocationRelativeTo(null);
            addBookTitleForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            addBookTitleForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addBookTitleButtonActionPerformed

    private void clearanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearanceButtonActionPerformed
        int selectedRow = userSearchResultTable.getSelectedRow();
        if (selectedRow != -1) {
            try {
                String username = String.valueOf(userSearchResultTable.getModel().getValueAt(selectedRow, 0));
                UserProfileRequestAttribute user_profile_query = new UserProfileRequestAttribute();
                user_profile_query.username = username;
                UserProfileQueryResult user_profile = ServerRequests.getUserProfile(user_profile_query);
                if (user_profile.user_role.equals("S")) {
                    GiveClearancetoStudentProfileForm giveClearancetoStudentProfileForm;
                    giveClearancetoStudentProfileForm = new GiveClearancetoStudentProfileForm(user_profile.student, user_profile.has_pending_library_record);
                    giveClearancetoStudentProfileForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
                    ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
                    giveClearancetoStudentProfileForm.setIconImage(logo.getImage());
                    giveClearancetoStudentProfileForm.setLocationRelativeTo(null);
                    giveClearancetoStudentProfileForm.pack();
                    GUI.libraryInchargeInterfaceFrame.setEnabled(false);
                    giveClearancetoStudentProfileForm.setVisible(true);
                } else if (user_profile.user_role.equals("E")) {
                    this.showRequestResult("only student profile can have clearance");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.showRequestResult("select user from user search table to save as alumni");
        }
    }//GEN-LAST:event_clearanceButtonActionPerformed

    private void addReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReportButtonActionPerformed
        try {
            AddReportTitleForm addReportTitleForm;
            addReportTitleForm = new AddReportTitleForm(ServerRequests.getDomainList());
            addReportTitleForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            addReportTitleForm.setIconImage(logo.getImage());
            addReportTitleForm.setLocationRelativeTo(null);
            addReportTitleForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            addReportTitleForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addReportButtonActionPerformed

    private void addSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubjectButtonActionPerformed
        try {
            AddSubjectForm addSubjectForm;
            addSubjectForm = new AddSubjectForm(ServerRequests.getDomainList());
            addSubjectForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            addSubjectForm.setIconImage(logo.getImage());
            addSubjectForm.setLocationRelativeTo(null);
            addSubjectForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            addSubjectForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addSubjectButtonActionPerformed

    private void updateBookTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookTitleButtonActionPerformed
        try {
            UpdateBookTitleForm addSubjectForm;
            addSubjectForm = new UpdateBookTitleForm(ServerRequests.getBookTitleList(), ServerRequests.getPublisherList(), ServerRequests.getDomainList());
            addSubjectForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            addSubjectForm.setIconImage(logo.getImage());
            addSubjectForm.setLocationRelativeTo(null);
            addSubjectForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            addSubjectForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateBookTitleButtonActionPerformed

    private void updateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateReportButtonActionPerformed
        try {
            UpdateReportTitleForm addSubjectForm;
            addSubjectForm = new UpdateReportTitleForm(ServerRequests.getReportTitleList(), ServerRequests.getDomainList());
            addSubjectForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            addSubjectForm.setIconImage(logo.getImage());
            addSubjectForm.setLocationRelativeTo(null);
            addSubjectForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            addSubjectForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateReportButtonActionPerformed

    private void updateSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSubjectButtonActionPerformed
        try {
            UpdateSubjectForm updatePublisherForm;
            updatePublisherForm = new UpdateSubjectForm(ServerRequests.getSubjectList(), ServerRequests.getDomainList());
            updatePublisherForm.setTitle(LibraryInchargeInterface.interfaceFrameTitle);
            ImageIcon logo = new ImageIcon(getClass().getResource(LibraryInchargeInterface.interfaceFrameImageIconPath));
            updatePublisherForm.setIconImage(logo.getImage());
            updatePublisherForm.setLocationRelativeTo(null);
            updatePublisherForm.pack();
            GUI.libraryInchargeInterfaceFrame.setEnabled(false);
            updatePublisherForm.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateSubjectButtonActionPerformed

    private void getBookTitlesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getBookTitlesButtonActionPerformed
        try {
            String result = Output.storeBookTitles();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getBookTitlesButtonActionPerformed

    private void getReportTitlesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getReportTitlesButtonActionPerformed
        try {
            String result = Output.storeReportTitles();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getReportTitlesButtonActionPerformed

    private void getPendingLibraryRecordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPendingLibraryRecordsButtonActionPerformed
        try {
            String result = Output.storeUsersWithPendingRecords();
            switch (result) {
                case "PATH_NOT_FOUND":
                    this.showRequestResult("storage path is not set, edit storage path");
                    break;
                case "NOT_STORED":
                    this.showRequestResult("error occured while saving list into file");
                    break;
                case "EMPTY_FILE":
                    this.showRequestResult("no results returned");
                    break;
                default:
                    this.showRequestResult(result);
                    break;
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getPendingLibraryRecordsButtonActionPerformed

    private void yearTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearTextKeyReleased
        try {
            Integer.parseInt(yearText.getText());
        } catch (NumberFormatException e) {
            evt.consume();
            if (yearText.getText().length() > 0) {
                JOptionPane.showMessageDialog(null, "number input only");
            }
        }
    }//GEN-LAST:event_yearTextKeyReleased

    private void yearTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearTextKeyTyped
        if (yearText.getText().length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_yearTextKeyTyped

    private void deleteLibraryContentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLibraryContentButtonActionPerformed
        if (yearText.getText().equals("")) {
            this.showRequestResult("enter exam pattern year to delete library content");
        } else {
            try {
                String year = yearText.getText();
                boolean deleted_successfully = ServerRequests.deleteLibraryContent(year);
                if (deleted_successfully) {
                    this.showRequestResult("library content deleted successfully.");
                } else {
                    this.showRequestResult("failed to delete library content, entered exam pattern might not exist");
                }
            } catch (IOException ex) {
                Logger.getLogger(LibraryInchargeInterfacePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteLibraryContentButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton addBookTitleButton;
    private javax.swing.JButton addDomainButton;
    private javax.swing.JLabel addEditLabel;
    private javax.swing.JLabel addEditLabel1;
    private javax.swing.JButton addPublisherButton;
    private javax.swing.JButton addReportButton;
    private javax.swing.JButton addSubjectButton;
    private javax.swing.JLabel bookAuthorLabel;
    private javax.swing.JTextField bookAuthorText;
    private javax.swing.JLabel bookDomainLabel;
    private javax.swing.JTextField bookDomainText;
    private javax.swing.JButton bookIssueButton;
    private javax.swing.JPanel bookIssuePanel;
    private javax.swing.JButton bookSearchButton;
    private javax.swing.JScrollPane bookSearchResultScrollPane;
    private javax.swing.JTable bookSearchResultTable;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JTextField bookTitleText;
    private javax.swing.JLabel catalogueLabel;
    private javax.swing.JButton clearAccountButton;
    private javax.swing.JButton clearanceButton;
    private javax.swing.JButton deleteLibraryContentButton;
    private javax.swing.JButton deleteUserProfileButton;
    private javax.swing.JButton editConnectionButton;
    private javax.swing.JButton editConstraintsButton;
    private javax.swing.JButton editStoragePathButton;
    private javax.swing.JLabel emailForUsersLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JButton getAccountListButton;
    private javax.swing.JButton getAlumniListButton;
    private javax.swing.JButton getBookTitlesButton;
    private javax.swing.JButton getOverDueLibraryRecordButton;
    private javax.swing.JButton getPendingLibraryRecordsButton;
    private javax.swing.JButton getPublisherButton;
    private javax.swing.JButton getPublisherListButton;
    private javax.swing.JButton getReportTitlesButton;
    private javax.swing.JButton getSubjectListButton;
    private javax.swing.JLabel interfaceIconLabel;
    private javax.swing.JPanel maintainancePanel;
    private javax.swing.JTextField mobileText;
    private javax.swing.JLabel mobilenoForUsersLabel;
    private javax.swing.JTabbedPane navigationTabbedPane;
    private javax.swing.JButton openStorageDirectory;
    private javax.swing.JScrollPane pendingBookResultScrollPane;
    private javax.swing.JTable pendingBookResultTable;
    private javax.swing.JScrollPane pendingReportResultScrollPane;
    private javax.swing.JTable pendingReportResultTable;
    private javax.swing.JButton renewBookButton;
    private javax.swing.JLabel reportDomainLabel;
    private javax.swing.JTextField reportDomainText1;
    private javax.swing.JButton reportIssueButton;
    private javax.swing.JPanel reportIssuePanel;
    private javax.swing.JButton reportSearchButton;
    private javax.swing.JScrollPane reportSearchResultScrollPane;
    private javax.swing.JTable reportSearchResultTable;
    private javax.swing.JLabel reportTitleLabel;
    private javax.swing.JTextField reportTitleText;
    private javax.swing.JButton resetStudentsVerificationButton;
    private javax.swing.JScrollPane resultWindowScrollPane;
    private javax.swing.JTextArea resultWindowTextArea;
    private javax.swing.JButton returnBookButton;
    private javax.swing.JPanel returnRenewPanel;
    private javax.swing.JButton returnReportButton;
    private javax.swing.JButton searchPendingRecordButton;
    private javax.swing.JButton searchUserButton;
    private javax.swing.JTextField subjectAbbreviationText;
    private javax.swing.JLabel subjectabbreviationLabel;
    private javax.swing.JButton updateBookTitleButton;
    private javax.swing.JButton updateDomainButton;
    private javax.swing.JButton updatePublisherButton;
    private javax.swing.JButton updateReportButton;
    private javax.swing.JButton updateSubjectButton;
    private javax.swing.JScrollPane userSearchResultScrollPane;
    private javax.swing.JTable userSearchResultTable;
    private javax.swing.JLabel usernameForPRLabel;
    private javax.swing.JTextField usernameForPRText;
    private javax.swing.JLabel usernameForUsersLabel;
    private javax.swing.JTextField usernameForUsersText;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JButton verifyButton;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables

    public void showRequestResult(String requestResult) {

        interfaceIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/96px/Notify.gif")));
        resultWindowTextArea.setText(" " + requestResult);
        TimerTask timerTask = new TimerTask() {
            @Override
            public void run() {
                interfaceIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/96px/DepartmentalLibrary.png")));
                resultWindowTextArea.setText(" Welcome to SKNCOE Computer Department Library");
            }
        };
        Timer timer = new Timer();
        long delay = ChronoUnit.MILLIS.between(LocalTime.now(), LocalTime.now().plusSeconds(6));
        timer.schedule(timerTask, delay);
    }

    //tableID 1: bookSearchResultTable
    //tableID 2: reportSearchResultTable
    //tableID 3: pendingBookResultTable
    //tableID 4: pendingReportResultTable
    //tableID 5: userSearchResultTable
    public void removeRowFromTable(int tableID, int rowIndex) {
        DefaultTableModel tableModel;
        switch (tableID) {
            case 1:
                tableModel = (DefaultTableModel) bookSearchResultTable.getModel();
                tableModel.getDataVector().remove(rowIndex);
                bookSearchResultTable.getSelectionModel().clearSelection();
                bookSearchResultTable.repaint();
                break;
            case 2:
                tableModel = (DefaultTableModel) reportSearchResultTable.getModel();
                tableModel.getDataVector().remove(rowIndex);
                reportSearchResultTable.getSelectionModel().clearSelection();
                reportSearchResultTable.repaint();
                break;
            case 3:
                tableModel = (DefaultTableModel) pendingBookResultTable.getModel();
                tableModel.getDataVector().remove(rowIndex);
                pendingBookResultTable.getSelectionModel().clearSelection();
                pendingBookResultTable.repaint();
                break;
            case 4:
                tableModel = (DefaultTableModel) pendingReportResultTable.getModel();
                tableModel.getDataVector().remove(rowIndex);
                pendingReportResultTable.getSelectionModel().clearSelection();
                pendingReportResultTable.repaint();
                break;
            case 5:
                tableModel = (DefaultTableModel) userSearchResultTable.getModel();
                tableModel.getDataVector().remove(rowIndex);
                userSearchResultTable.getSelectionModel().clearSelection();
                userSearchResultTable.repaint();
                break;
            default:
                break;
        }
    }
}
